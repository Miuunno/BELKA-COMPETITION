{"metadata":{"kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":67356,"databundleVersionId":8006601,"sourceType":"competition"}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install rdkit\n!pip install duckdb","metadata":{"execution":{"iopub.status.busy":"2024-06-21T07:10:20.711987Z","iopub.execute_input":"2024-06-21T07:10:20.712731Z","iopub.status.idle":"2024-06-21T07:10:50.495240Z","shell.execute_reply.started":"2024-06-21T07:10:20.712689Z","shell.execute_reply":"2024-06-21T07:10:50.493884Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Collecting rdkit\n  Downloading rdkit-2023.9.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.9 kB)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from rdkit) (1.26.4)\nRequirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from rdkit) (9.5.0)\nDownloading rdkit-2023.9.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m34.9/34.9 MB\u001b[0m \u001b[31m43.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: rdkit\nSuccessfully installed rdkit-2023.9.6\nCollecting duckdb\n  Downloading duckdb-1.0.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (762 bytes)\nDownloading duckdb-1.0.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.5/18.5 MB\u001b[0m \u001b[31m73.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m0:01\u001b[0m\n\u001b[?25hInstalling collected packages: duckdb\nSuccessfully installed duckdb-1.0.0\n","output_type":"stream"}]},{"cell_type":"code","source":"from rdkit import Chem\nfrom rdkit.Chem import rdchem\nimport torch\nimport torchvision\nfrom torch import nn, Tensor\nfrom torchvision.transforms import v2\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\nimport pandas as pd\nimport time\nimport torch.nn as nn\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem\nfrom sklearn.preprocessing import OneHotEncoder\nimport numpy as np\nimport torch.nn.functional as F\nimport re\nfrom torchvision.models.convnext import ConvNeXt, CNBlockConfig, LayerNorm2d\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.model_selection import train_test_split\nimport time \nimport random\nfrom functools import partial\nfrom torchvision.models.convnext import CNBlockConfig, Permute, StochasticDepth, Conv2dNormActivation\nfrom typing import Any, Callable, List, Optional, Sequence\nfrom torchvision.utils import _log_api_usage_once\nimport duckdb","metadata":{"execution":{"iopub.status.busy":"2024-06-21T07:10:50.497606Z","iopub.execute_input":"2024-06-21T07:10:50.498020Z","iopub.status.idle":"2024-06-21T07:10:56.798655Z","shell.execute_reply.started":"2024-06-21T07:10:50.497982Z","shell.execute_reply":"2024-06-21T07:10:56.797519Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train_path = '/kaggle/input/leash-BELKA/train.parquet'\ntest_path = '/kaggle/input/leash-BELKA/test.parquet'\n\ncon = duckdb.connect()\n\ndf = con.query(f\"\"\"(SELECT *\n                        FROM parquet_scan('{train_path}')\n                        WHERE binds = 0\n                        ORDER BY random()\n                        LIMIT 30000)\n                        UNION ALL\n                        (SELECT *\n                        FROM parquet_scan('{train_path}')\n                        WHERE binds = 1\n                        ORDER BY random()\n                        LIMIT 30000)\"\"\").df()\n\ncon.close()","metadata":{"execution":{"iopub.status.busy":"2024-06-21T07:10:56.799946Z","iopub.execute_input":"2024-06-21T07:10:56.800451Z","iopub.status.idle":"2024-06-21T07:11:54.002820Z","shell.execute_reply.started":"2024-06-21T07:10:56.800420Z","shell.execute_reply":"2024-06-21T07:11:54.001694Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5ba3a5ddab0e44b2a18bd7e3d56cd1c0"}},"metadata":{}}]},{"cell_type":"code","source":"Chiral = {\"CHI_UNSPECIFIED\":0,  \"CHI_TETRAHEDRAL_CW\":1, \"CHI_TETRAHEDRAL_CCW\":2, \"CHI_OTHER\":3}\nHybridization = {\"UNSPECIFIED\":0, \"S\":1, \"SP\":2, \"SP2\":3, \"SP3\":4, \"SP3D\":5, \"SP3D2\":6, \"OTHER\":7}\nenc = {'l': 1, 'y': 2, '@': 3, '3': 4, 'H': 5, 'S': 6, 'F': 7, 'C': 8, 'r': 9, 's': 10, '/': 11, 'c': 12, 'o': 13,\n           '+': 14, 'I': 15, '5': 16, '(': 17, '2': 18, ')': 19, '9': 20, 'i': 21, '#': 22, '6': 23, '8': 24, '4': 25, '=': 26,\n           '1': 27, 'O': 28, '[': 29, 'D': 30, 'B': 31, ']': 32, 'N': 33, '7': 34, 'n': 35, '-': 36}\nenc_atom = {\"H\": 0, \"C\": 1, \"O\": 2, \"N\": 3, \"S\": 4, \"F\": 5, \"D\": 6, \"B\": 7, \"I\": 8}\natomInfo = 21\nstructInfo = 21\nlensize= atomInfo + structInfo\n\nH_Vector = [0]*atomInfo\nH_Vector[0]= 1\n\nlowerReg = re.compile(r'^[a-z]+$')\ndef islower(s):\n    return lowerReg.match(s) is not None\n\nupperReg = re.compile(r'^[A-Z]+$')\ndef isupper(s):\n    return upperReg.match(s) is not None\n\ndef calc_atom_feature(atom):\n    \n    if atom.GetSymbol() == 'H':   feature = [1,0,0,0,0]\n    elif atom.GetSymbol() == 'C': feature = [0,1,0,0,0]\n    elif atom.GetSymbol() == 'O': feature = [0,0,1,0,0]\n    elif atom.GetSymbol() == 'N': feature = [0,0,0,1,0]\n    else: feature = [0,0,0,0,1]\n        \n    feature.append(atom.GetTotalNumHs()/8)\n    feature.append(atom.GetTotalDegree()/4)\n    feature.append(atom.GetFormalCharge()/8)\n    feature.append(atom.GetTotalValence()/8)\n    feature.append(atom.IsInRing()*1)\n    feature.append(atom.GetIsAromatic()*1)\n\n    f =  [0]*(len(Chiral)-1)\n    if Chiral.get(str(atom.GetChiralTag()), 0) != 0:\n        f[Chiral.get(str(atom.GetChiralTag()), 0)] = 1\n    feature.extend(f)\n\n    f =  [0]*(len(Hybridization)-1)\n    if Hybridization.get(str(atom.GetHybridization()), 0) != 0:\n        f[Hybridization.get(str(atom.GetHybridization()), 0)] = 1\n    feature.extend(f)\n    \n    return(feature)\n\n\ndef calc_structure_feature(c,flag,label):\n    feature = [0]*structInfo\n\n    if c== '(' :\n        feature[0] = 1\n        flag = 0\n    elif c== ')' :\n        feature[1] = 1\n        flag = 0\n    elif c== '[' :\n        feature[2] = 1\n        flag = 0\n    elif c== ']' :\n        feature[3] = 1\n        flag = 0\n    elif c== '.' :\n        feature[4] = 1\n        flag = 0\n    elif c== ':' :\n        feature[5] = 1\n        flag = 0\n    elif c== '=' :\n        feature[6] = 1\n        flag = 0\n    elif c== '#' :\n        feature[7] = 1\n        flag = 0\n    elif c== '\\\\':\n        feature[8] = 1\n        flag = 0\n    elif c== '/' :\n        feature[9] = 1\n        flag = 0  \n    elif c== '@' :\n        feature[10] = 1\n        flag = 0\n    elif c== '+' :\n        feature[11] = 1\n        flag = 1\n    elif c== '-' :\n        feature[12] = 1\n        flag = 1\n    elif c.isdigit() == True:\n        if flag == 0:\n            if c in label:\n                feature[20] = 1\n            else:\n                label.append(c)\n                feature[19] = 1\n        else:\n            feature[int(c)-1+12] = 1\n            flag = 0\n    return(feature,flag,label)\n\n\ndef calc_featurevector(mol, smiles,atomsize):\n    flag = 0\n    label = []\n    molfeature=[]\n    idx = 0\n    j = 0\n            \n    for c in smiles:\n        if islower(c) == True: continue\n        elif isupper(c) == True:\n            if c == 'H':\n                molfeature.extend(H_Vector)\n            else:\n                molfeature.extend(calc_atom_feature(rdchem.Mol.GetAtomWithIdx(mol, idx)))\n                idx = idx + 1\n            molfeature.extend([0]*structInfo)\n            j = j +1\n            \n        else:   \n            molfeature.extend([0]*atomInfo)\n            f,flag,label = calc_structure_feature(c,flag,label)\n            molfeature.extend(f)\n            j = j +1\n\n    #0-Padding\n    molfeature.extend([0]*(atomsize-j)*lensize)        \n    return(molfeature)\n\n\ndef mol_to_feature(mol,n,atomsize):\n    try: defaultSMILES = Chem.MolToSmiles(mol, kekuleSmiles=False, isomericSmiles=True, rootedAtAtom=int(n))\n    except: defaultSMILES = Chem.MolToSmiles(mol, kekuleSmiles=False, isomericSmiles=True)\n    try: isomerSMILES = Chem.MolToSmiles(mol, kekuleSmiles=True, isomericSmiles=True, rootedAtAtom=int(n))\n    except: isomerSMILES = Chem.MolToSmiles(mol, kekuleSmiles=True, isomericSmiles=True)\n    return calc_featurevector(Chem.MolFromSmiles(defaultSMILES), isomerSMILES,atomsize)\n\ndef mol_to_allSMILESfeature(mol, atomsize):\n    idx, features =0,  []\n    while idx < mol.GetNumAtoms():\n        try: defaultSMILES = Chem.MolToSmiles(mol, kekuleSmiles=False, isomericSmiles=True, rootedAtAtom=int(idx))\n        except: break\n        isomerSMILES = Chem.MolToSmiles(mol, kekuleSmiles=True, isomericSmiles=True, rootedAtAtom=int(idx))\n        features.append(calc_featurevector(Chem.MolFromSmiles(defaultSMILES), isomerSMILES,atomsize))\n        idx = idx + 1\n    return(features)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T07:47:00.882138Z","iopub.execute_input":"2024-06-21T07:47:00.882715Z","iopub.status.idle":"2024-06-21T07:47:00.918199Z","shell.execute_reply.started":"2024-06-21T07:47:00.882632Z","shell.execute_reply":"2024-06-21T07:47:00.916673Z"},"trusted":true},"execution_count":106,"outputs":[]},{"cell_type":"code","source":"class MyModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.pre_fl = nn.Flatten(1)\n        self.cn1 = nn.Conv1d(1, 8, kernel_size=14701)\n        self.cn2 = nn.Conv1d(8, 16, kernel_size=263)\n        self.cn3 = nn.Conv1d(16, 32, kernel_size = 132)\n        self.cn4 = nn.Conv1d(32, 64, kernel_size=66)\n        self.cn5 = nn.Conv1d(64, 128, kernel_size = 33)\n        self.cn6 = nn.Conv1d(128, 256, kernel_size=17)\n        self.cn7 = nn.Conv1d(256, 512, kernel_size = 9)\n        self.avg = nn.AdaptiveAvgPool1d(1)\n        self.fl = nn.Flatten(1)\n        self.fc1 = nn.Linear(512, 1000)\n        self.fc2 = nn.Linear(1000, 1000)\n        self.fc3 = nn.Linear(1000, 512)\n        self.fc4 = nn.Linear(512, 2)\n    def forward(self, x):\n        x = self.pre_fl(x)\n        x = x.unsqueeze(dim=1)\n        x = self.cn1(x)\n        x = self.cn2(x)\n        x = self.cn3(x)\n        x = self.cn4(x)\n        x = self.cn5(x)\n        x = self.cn6(x)\n        x = self.cn7(x)\n        x = self.avg(x)\n        x = self.fl(x)\n        x = self.fc1(x)\n        x = self.fc2(x)\n        x = self.fc3(x)\n        x = self.fc4(x)\n        return x","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model = MyModel()\ndevice = \"cuda:0\" if torch.cuda.is_available() else \"cpu\"\nif torch.cuda.device_count() > 1:\n    print(\"Let's use\", torch.cuda.device_count(), \"GPUs!\")\n    model = nn.DataParallel(model)\nmodel = model.to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001, weight_decay=0.001)\ncriterion = torch.nn.BCEWithLogitsLoss()","metadata":{"execution":{"iopub.status.busy":"2024-06-20T11:13:14.840614Z","iopub.execute_input":"2024-06-20T11:13:14.840903Z","iopub.status.idle":"2024-06-20T11:13:16.954544Z","shell.execute_reply.started":"2024-06-20T11:13:14.840877Z","shell.execute_reply":"2024-06-20T11:13:16.953500Z"},"trusted":true},"execution_count":365,"outputs":[{"name":"stdout","text":"Let's use 2 GPUs!\n","output_type":"stream"}]},{"cell_type":"code","source":"class Mydataset(Dataset):\n    def __init__(self, mol_value, binds, transform):\n        self.mol_value = mol_value\n        self.binds = binds\n        self.transform = transform\n    def __len__(self):\n        return len(self.mol_value)\n    def __getitem__ (self, idx):\n        mol_value = self.mol_value[idx]\n        bind = self.binds[idx]\n        if bind == 1:\n            bind = torch.tensor([[0, 1]]).type(torch.float32)\n        else:\n            bind = torch.tensor([[1, 0]]).type(torch.float32)\n        mol_value = mol_to_feature(Chem.MolFromSmiles(mol_value), -1, 400)\n        if self.transform:\n            mol_value = torch.from_numpy(np.array(mol_value)).resize(42, 400)\n            mol_value = self.transform(mol_value)\n        return mol_value, bind\nclass Mytest(Dataset):\n    def __init__(self, mol_value, binds, transform):\n        self.mol_value = mol_value\n        self.transform = transform\n    def __len__(self):\n        return len(self.mol_value)\n    def __getitem__ (self, idx):\n        mol_value = self.mol_value[idx]\n        mol_value = mol_to_feature(Chem.MolFromSmiles(mol_value), -1, 100)\n        length = len(mol_value)\n        mol_value.extend([-1]*(4200-length))\n        mol_value = [(i+1)/2 for i in a]\n        if self.transform:\n            mol_value = torch.from_numpy(np.array(mol_value)).resize(42, 100)\n            mol_value = self.transform(mol_value)\n        return mol_value","metadata":{"execution":{"iopub.status.busy":"2024-06-20T11:13:18.160716Z","iopub.execute_input":"2024-06-20T11:13:18.161069Z","iopub.status.idle":"2024-06-20T11:13:18.172086Z","shell.execute_reply.started":"2024-06-20T11:13:18.161040Z","shell.execute_reply":"2024-06-20T11:13:18.171123Z"},"trusted":true},"execution_count":366,"outputs":[]},{"cell_type":"code","source":"model.train()\nfor epoch in range(11):\n    print(\"prepare your data\")\n    train_loader = DataLoader(Mydataset(df[\"molecule_smiles\"], df[\"binds\"], transform=v2.Compose([v2.ToDtype(torch.float32)])), batch_size=1000, shuffle=True, pin_memory=\"cpu\")\n    time_train = time.time()\n    print(\"it is time to fed the model\")\n    for i, (a, b) in enumerate(train_loader):\n        a = a.unsqueeze(dim=1).to(device)\n        out = model(a)\n        del a\n        b = b.squeeze().to(device)\n        loss = criterion(out, b)\n        loss.backward()\n        _, predictions = torch.max(out, 1)\n        del out, \n        _, target = torch.max(b, 1)\n        acc = torch.mean((predictions == target.to(device))*torch.tensor(1, dtype=torch.float32))\n        print(\n            \"[{epoch}: {i}/{len}] \\n\"\n            \"Time_train: {time:.3f} \\n\"\n            \"Train_loss: {loss:.4f} \\n\"\n            \"Train_acc: {acc:.4f} \\n\"\n            \"Learning_rate: {rate:.4f} \\n\".format(epoch=epoch, i=i, len=len(train_loader), time=time.time()-time_train, loss=loss.item(), acc=acc.item(), rate=optimizer.param_groups[0][\"lr\"]))\n        time_train = time.time()\n        optimizer.step()\n        optimizer.zero_grad()\n        del predictions, b, acc, target, loss\n    torch.save({\"last_epoch\": epoch + 1,\"model_state\": model.state_dict(), \"optimizer\": optimizer.state_dict()}, \"/kaggle/working/checkpoint.pth.tar\")","metadata":{"execution":{"iopub.status.busy":"2024-06-20T11:17:48.725179Z","iopub.execute_input":"2024-06-20T11:17:48.725826Z","iopub.status.idle":"2024-06-20T11:19:57.456540Z","shell.execute_reply.started":"2024-06-20T11:17:48.725791Z","shell.execute_reply":"2024-06-20T11:19:57.455217Z"},"trusted":true},"execution_count":370,"outputs":[{"name":"stdout","text":"prepare your data\nit is time to fed the model\n[0: 0/6] \nTime_train: 6.806 \nTrain_loss: 0.6932 \nTrain_acc: 0.5100 \nLearning_rate: 0.0010 \n\n[0: 1/6] \nTime_train: 6.890 \nTrain_loss: 0.6934 \nTrain_acc: 0.5100 \nLearning_rate: 0.0010 \n\n[0: 2/6] \nTime_train: 6.918 \nTrain_loss: 0.6939 \nTrain_acc: 0.5080 \nLearning_rate: 0.0010 \n\n[0: 3/6] \nTime_train: 7.016 \nTrain_loss: 0.7011 \nTrain_acc: 0.4980 \nLearning_rate: 0.0010 \n\n[0: 4/6] \nTime_train: 6.893 \nTrain_loss: 0.7006 \nTrain_acc: 0.4940 \nLearning_rate: 0.0010 \n\n[0: 5/6] \nTime_train: 6.858 \nTrain_loss: 0.6972 \nTrain_acc: 0.4760 \nLearning_rate: 0.0010 \n\nprepare your data\nit is time to fed the model\n[1: 0/6] \nTime_train: 6.821 \nTrain_loss: 0.6937 \nTrain_acc: 0.5020 \nLearning_rate: 0.0010 \n\n[1: 1/6] \nTime_train: 6.778 \nTrain_loss: 0.6936 \nTrain_acc: 0.5190 \nLearning_rate: 0.0010 \n\n[1: 2/6] \nTime_train: 6.776 \nTrain_loss: 0.6995 \nTrain_acc: 0.4930 \nLearning_rate: 0.0010 \n\n[1: 3/6] \nTime_train: 6.815 \nTrain_loss: 0.6947 \nTrain_acc: 0.5040 \nLearning_rate: 0.0010 \n\n[1: 4/6] \nTime_train: 6.877 \nTrain_loss: 0.6960 \nTrain_acc: 0.5060 \nLearning_rate: 0.0010 \n\n[1: 5/6] \nTime_train: 6.870 \nTrain_loss: 0.6945 \nTrain_acc: 0.5410 \nLearning_rate: 0.0010 \n\nprepare your data\nit is time to fed the model\n[2: 0/6] \nTime_train: 6.870 \nTrain_loss: 0.6934 \nTrain_acc: 0.5120 \nLearning_rate: 0.0010 \n\n[2: 1/6] \nTime_train: 6.916 \nTrain_loss: 0.6963 \nTrain_acc: 0.4760 \nLearning_rate: 0.0010 \n\n[2: 2/6] \nTime_train: 6.811 \nTrain_loss: 0.6916 \nTrain_acc: 0.5380 \nLearning_rate: 0.0010 \n\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[370], line 7\u001b[0m\n\u001b[1;32m      5\u001b[0m time_train \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime()\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mit is time to fed the model\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m----> 7\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i, (a, b) \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(train_loader):\n\u001b[1;32m      8\u001b[0m     a \u001b[38;5;241m=\u001b[39m a\u001b[38;5;241m.\u001b[39munsqueeze(dim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[1;32m      9\u001b[0m     out \u001b[38;5;241m=\u001b[39m model(a)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/utils/data/dataloader.py:630\u001b[0m, in \u001b[0;36m_BaseDataLoaderIter.__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    627\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_sampler_iter \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    628\u001b[0m     \u001b[38;5;66;03m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[39;00m\n\u001b[1;32m    629\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reset()  \u001b[38;5;66;03m# type: ignore[call-arg]\u001b[39;00m\n\u001b[0;32m--> 630\u001b[0m data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_next_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    631\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_yielded \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m    632\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_dataset_kind \u001b[38;5;241m==\u001b[39m _DatasetKind\u001b[38;5;241m.\u001b[39mIterable \u001b[38;5;129;01mand\u001b[39;00m \\\n\u001b[1;32m    633\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_IterableDataset_len_called \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \\\n\u001b[1;32m    634\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_yielded \u001b[38;5;241m>\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_IterableDataset_len_called:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/utils/data/dataloader.py:674\u001b[0m, in \u001b[0;36m_SingleProcessDataLoaderIter._next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    672\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_next_data\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    673\u001b[0m     index \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_next_index()  \u001b[38;5;66;03m# may raise StopIteration\u001b[39;00m\n\u001b[0;32m--> 674\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dataset_fetcher\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfetch\u001b[49m\u001b[43m(\u001b[49m\u001b[43mindex\u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# may raise StopIteration\u001b[39;00m\n\u001b[1;32m    675\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pin_memory:\n\u001b[1;32m    676\u001b[0m         data \u001b[38;5;241m=\u001b[39m _utils\u001b[38;5;241m.\u001b[39mpin_memory\u001b[38;5;241m.\u001b[39mpin_memory(data, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pin_memory_device)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py:51\u001b[0m, in \u001b[0;36m_MapDatasetFetcher.fetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     49\u001b[0m         data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset\u001b[38;5;241m.\u001b[39m__getitems__(possibly_batched_index)\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m---> 51\u001b[0m         data \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset[idx] \u001b[38;5;28;01mfor\u001b[39;00m idx \u001b[38;5;129;01min\u001b[39;00m possibly_batched_index]\n\u001b[1;32m     52\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     53\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset[possibly_batched_index]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py:51\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     49\u001b[0m         data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset\u001b[38;5;241m.\u001b[39m__getitems__(possibly_batched_index)\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m---> 51\u001b[0m         data \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdataset\u001b[49m\u001b[43m[\u001b[49m\u001b[43midx\u001b[49m\u001b[43m]\u001b[49m \u001b[38;5;28;01mfor\u001b[39;00m idx \u001b[38;5;129;01min\u001b[39;00m possibly_batched_index]\n\u001b[1;32m     52\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     53\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset[possibly_batched_index]\n","Cell \u001b[0;32mIn[366], line 15\u001b[0m, in \u001b[0;36mMydataset.__getitem__\u001b[0;34m(self, idx)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     14\u001b[0m     bind \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mtensor([[\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m0\u001b[39m]])\u001b[38;5;241m.\u001b[39mtype(torch\u001b[38;5;241m.\u001b[39mfloat32)\n\u001b[0;32m---> 15\u001b[0m mol_value \u001b[38;5;241m=\u001b[39m \u001b[43mmol_to_feature\u001b[49m\u001b[43m(\u001b[49m\u001b[43mChem\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mMolFromSmiles\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmol_value\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m400\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     16\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtransform:\n\u001b[1;32m     17\u001b[0m     mol_value \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mfrom_numpy(np\u001b[38;5;241m.\u001b[39marray(mol_value))\u001b[38;5;241m.\u001b[39mresize(\u001b[38;5;241m42\u001b[39m, \u001b[38;5;241m400\u001b[39m)\n","Cell \u001b[0;32mIn[192], line 136\u001b[0m, in \u001b[0;36mmol_to_feature\u001b[0;34m(mol, n, atomsize)\u001b[0m\n\u001b[1;32m    134\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m: isomerSMILES \u001b[38;5;241m=\u001b[39m Chem\u001b[38;5;241m.\u001b[39mMolToSmiles(mol, kekuleSmiles\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, isomericSmiles\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, rootedAtAtom\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mint\u001b[39m(n))\n\u001b[1;32m    135\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m: isomerSMILES \u001b[38;5;241m=\u001b[39m Chem\u001b[38;5;241m.\u001b[39mMolToSmiles(mol, kekuleSmiles\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, isomericSmiles\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m--> 136\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mcalc_featurevector\u001b[49m\u001b[43m(\u001b[49m\u001b[43mChem\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mMolFromSmiles\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdefaultSMILES\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43misomerSMILES\u001b[49m\u001b[43m,\u001b[49m\u001b[43matomsize\u001b[49m\u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[192], line 115\u001b[0m, in \u001b[0;36mcalc_featurevector\u001b[0;34m(mol, smiles, atomsize)\u001b[0m\n\u001b[1;32m    113\u001b[0m     molfeature\u001b[38;5;241m.\u001b[39mextend(H_Vector)\n\u001b[1;32m    114\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 115\u001b[0m     molfeature\u001b[38;5;241m.\u001b[39mextend(\u001b[43mcalc_atom_feature\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrdchem\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mMol\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mGetAtomWithIdx\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmol\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43midx\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m    116\u001b[0m     idx \u001b[38;5;241m=\u001b[39m idx \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m    117\u001b[0m molfeature\u001b[38;5;241m.\u001b[39mextend([\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m*\u001b[39mstructInfo)\n","Cell \u001b[0;32mIn[192], line 40\u001b[0m, in \u001b[0;36mcalc_atom_feature\u001b[0;34m(atom)\u001b[0m\n\u001b[1;32m     37\u001b[0m feature\u001b[38;5;241m.\u001b[39mextend(f)\n\u001b[1;32m     39\u001b[0m f \u001b[38;5;241m=\u001b[39m  [\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m*\u001b[39m(\u001b[38;5;28mlen\u001b[39m(Hybridization)\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m---> 40\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[43mHybridization\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43matom\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mGetHybridization\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m     41\u001b[0m     f[Hybridization\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;28mstr\u001b[39m(atom\u001b[38;5;241m.\u001b[39mGetHybridization()), \u001b[38;5;241m0\u001b[39m)] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m     42\u001b[0m feature\u001b[38;5;241m.\u001b[39mextend(f)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"checkpoint = torch.load(\"/kaggle/input/checkcheck/checkpoint.pth (3).tar\")\nmodel.load_state_dict(checkpoint[\"model_state\"])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nwith torch.no_grad():\n    model.eval()\n    df = pd.read_csv(\"/kaggle/input/leash-BELKA/test.csv\")\n    df1 = pd.DataFrame({\"id\", \"binds\"})\n    test_loader = DataLoader(Mytest(df[\"molecule_smiles\"],transform=v2.Compose([v2.ToDtype(torch.float32)])), batch_size=1670000, shuffle=True, pin_memory=\"cpu\")\n    pre_z = 0\n    for i , a in enumerate(test_loader):\n        out = model(a.squeeze().to(device))\n        _, out = torch.max(out, 1)\n        for z in range(16700000):\n            df1.loc[pre_z] = {\"id\": df[\"id\"][pre_z], \"binds\": out[z].item()}\n            pre_z += 1\n        output = []\n        if (i + 100000) % 1000000 == 0:\n            print(i)\npd.DataFrame.to_csv(\"/kaggle/working/submission.csv\", df1)","metadata":{"execution":{"iopub.status.busy":"2024-06-20T10:43:31.332237Z","iopub.status.idle":"2024-06-20T10:43:31.332693Z","shell.execute_reply.started":"2024-06-20T10:43:31.332470Z","shell.execute_reply":"2024-06-20T10:43:31.332491Z"},"trusted":true},"execution_count":null,"outputs":[]}]}